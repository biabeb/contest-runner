{"id": "8f76111b-9be0-478b-a053-ed0445af4a8a", "title": "Reverse Hash", "description": "It should be impossible to reverse a hash... but maybe it's possible...", "statement": "Victor has covered his basement floor with an enormous square array of gears. Each gear in the grid can be rotated into\nany of 12 positions. If Victor rotates a gear in position (_r_, _c_) by _k_ turns, then all of the gears in the same\nrow (row _r_) or the same column (column _c_) will also rotate forward by _k_ positions. For example, if a gear in\nposition 6 is rotated 8 turns, it's now in position 2 (since 6 + 8 % 12 = 2). Note that gear positions are 1-indexed, so\nturning a gear at position 6 forward by 6 turns results in position 12, and the next position after 12 is position 1.\n\nVictor doesn't want anyone to know the original position of the gears, so he rotates several of the gears to encrypt the\nposition. Given the final positions of the gears and the sequence of rotations that Victor made, can you recover the\noriginal position of the grid?", "input": "The first line contains two integers: **N**, the number of rows/columns of the square array of gears, and **T**, the\nnumber of turns Victor performed.\n\nThe next **N** lines contain **N** integers apiece corresponding to the positions of the gears after all of Victor's\nchanges, where the integer on line **r** and position **c** gives the position of the gear on the **r<sup>th</sup>** row and **c<sup>th</sup>** column.\n\nThe next **T** lines each contain 3 integers: **R**, **C**, and **K**, indicating that the gear in position (**R**,\n**C**)\nwas turned forward by **K** turns (along with all the other gears in row **R** and column **C**). Note that **R**\nand **C** are 1-indexed. This sequence is given in chronological order, so Victor's first move is given in the first\nline, etc.", "output": "Output **N** lines of **N** space separated integers, where the integer in line **R** and column **C**\ngives original position of that gear.", "constraints": "* Each gear's position _p_ is an integer 1 &le; _p_ &le; 12.\n* 1 &le; **N** &le; 100\n* 0 &le; **T** &le; 100\n* 1 &le; **R**, **C** &le; **N**\n* 0 &le; **K** &le; 12 (a rotation of 0 or 12 has no effect, however)", "samples": 1, "tests": 16, "timelimit": "5"}